import com.diffplug.spotless.LineEnding
import com.hypherionmc.modpublisher.properties.ModLoader

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.113'
    id 'com.diffplug.spotless'
    id 'idea'
    id "com.hypherionmc.modutils.modpublisher" version '2.1.8'
    id("com.vanniktech.maven.publish") version "0.34.0"
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

repositories {
    // Add here additional repositories if required by some of the dependencies below.
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    runs {
        client {
            client()

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()

            programArguments = [
                    '--mod', project.mod_id,
                    '--all',
                    '--output', file('src/generated/resources/').getAbsolutePath(),
                    '--existing', file('src/main/resources/').getAbsolutePath()
            ]
        }

        // applies to all the run configs above
        configureEach {
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        // define mod <-> source bindings
        // these are used to tell the game which sources are for which mod
        // multi mod projects should define one per mod
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// Sets up a dependency configuration called 'localRuntime'.
// This configuration should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
    implementation "org.appliedenergistics:guideme:${guide_me_version}"
    api "org.appliedenergistics:appliedenergistics2:${ae2_version}"
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}
// Include the output of "generateModMetadata" as an input directory for the build
// this works with both building through Gradle and the IDE.
sourceSets.main.resources.srcDir generateModMetadata
// To avoid having to run "generateModMetadata" manually, make it run on every project reload
neoForge.ideSyncTask generateModMetadata

tasks.register('javadocJar', Jar) {
    dependsOn javadoc
    archiveClassifier = "javadoc"
    from javadoc.destinationDir
}

tasks.register('sourcesJar', Jar) {
    archiveClassifier = "sources"
    from sourceSets.main.allJava
}

tasks.register('apiJar', Jar) {
    archiveClassifier = "api"
    // api jar ist just a development aid and serves as both a binary and source jar simultaneously
    from sourceSets.main.output
    from sourceSets.main.allJava
    manifest {
        attributes("Fabric-Loom-Remap": true)
    }
}

tasks.register('publishEverywhere') {
    dependsOn 'spotlessApply', 'build', 'publishMod', 'publishToMavenCentral'
}

tasks.javadoc {
    (options as StandardJavadocDocletOptions).addStringOption("Xdoclint:all,-missing", '-Werror')
    (options as StandardJavadocDocletOptions).addStringOption("Xmaxwarns", '500')
}
afterEvaluate {
    tasks.javadoc {
        (options as StandardJavadocDocletOptions).addStringOption("Xdoclint:none")
    }
}

signing {
    setRequired {
        gradle.taskGraph.allTasks.any { it instanceof PublishToMavenRepository }
    }
}

mavenPublishing  {
    publishToMavenCentral(true)

    coordinates("io.github.pedroksl", "${project.mod_id}", "${project.mod_version}")

    pom {
        name = "${project.mod_name}"
        description = "${project.mod_description}"
        inceptionYear = "2025"
        url = "${project.mod_url}"
        licenses {
            license {
                name = "${project.mod_license}"
                url = "${project.mod_license_url}"
                distribution = "${project.mod_license_url}"
            }
        }
        developers {
            developer {
                id = "Pedro Sathler"
                name = "${project.mod_authors}"
                url = "https://github.com/pedroksl"
            }
        }
        scm {
            url = "${project.mod_url}"
            connection = "scm:git:git://github.com/pedroksl/AE2AddonLib.git"
            developerConnection = "scm:git:ssh://git@github.com/pedroksl/AE2AddonLib.git"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

publisher {
    apiKeys {
        // Modrinth Token
        modrinth System.getenv("MODRINTH_TOKEN")
        // Curseforge Token
        curseforge System.getenv("CURSE_TOKEN")
        // GitHub Token
        github System.getenv("GITHUB_TOKEN")
    }

    setDebug(false)

    setCurseID("1366135")
    //setModrinthID("rxYaglEe")
    setVersionType("${project.version_type}")
    setChangelog("https://raw.githubusercontent.com/pedroksl/AE2AddonLib/refs/heads/main/CHANGELOG.md")
    setVersion("${project.version}")
    setDisplayName("AE2AddonLib-${project.version}")
    setGameVersions("${project.minecraft_version}")
    setLoaders(ModLoader.NEOFORGE)
    setCurseEnvironment("both")
    setArtifact("build/libs/${project.mod_name.replace(" ", "")}-${project.version}.jar")
    setDisableMalwareScanner(true)
    setJavaVersions(JavaVersion.VERSION_21, 21)
    setDisableEmptyJarCheck(true)

    github {
        repo = "pedroksl/AE2AddonLib"

        tag = "${project.version}-neoforge"

        createTag = true
        createRelease = true
        draft = false
        updateRelease = true

        displayName = "AE2AddonLib-${project.version}"
    }

    curseDepends {
        required "applied-energistics-2"
    }

    modrinthDepends {
        required "ae2"
    }
}

spotless {
    java {
        target("/src/**/java/**/*.java")
        endWithNewline()
        indentWithTabs(1)
        removeUnusedImports()
        palantirJavaFormat()
        importOrderFile(file("ae2lib.importorder"))
        toggleOffOn()
        setLineEndings(LineEnding.UNIX)

        bumpThisNumberIfACustomStepChanges(1)
    }

    json {
        target('src/**/resources/**/*.json')
        biome()
        indentWithSpaces(2)
        endWithNewline()
        setLineEndings(LineEnding.UNIX)
    }
}